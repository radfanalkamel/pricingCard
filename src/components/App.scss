$primary-dark : #ff9900;
$primary-white: #ffffff;

// All about the mixins
@mixin flex-container($direction,$align,$justify,$wrap){
    display: flex;
    flex-wrap: $wrap;
    flex-direction: $direction;
    align-items: $align;
    justify-content: $justify;
}
@mixin button-component($bg-color,$text-color){
    background-color : $bg-color;
    color : $text-color;
}
@mixin container-width($cont-width){
    width: 100%;
    max-width: $cont-width;
    margin: 0 auto;
    padding: 0px 20px;
}

// Different Classes
.container-1200{
    @include container-width(1200px);
    @include flex-container(row, center,center , wrap);
    min-height: 100vh;
    padding: 50px 20px;
}
.btn-outline{
  @include button-component(transparent, $primary-dark);
  border: 1px solid $primary-dark;
  border-radius: 2px;
  transition: all 0.25s ease;
  &:hover{
    background-color: $primary-dark;
    color: $primary-white;
  }
}
.btn-dark{
  @include button-component(transparent, $primary-dark);
  border: 1px solid $primary-dark;
  background-color: $primary-dark;
  color: $primary-white;
  border-radius: 2px;
  transition: all 0.25s ease;
  &:hover{
    background-color: $primary-white;
    color: $primary-dark;
  }
}

// Stuffs related to the fluid typography from the CSS tricks
@function strip-unit($value) {
    @return $value / ($value * 0 + 1);
  }
  
@mixin fluid-type($min-vw, $max-vw, $min-font-size, $max-font-size) {
    $u1: unit($min-vw);
    $u2: unit($max-vw);
    $u3: unit($min-font-size);
    $u4: unit($max-font-size);
  
    @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
      & {
  
        font-size: $min-font-size;
        @media screen and (min-width: $min-vw) {
          font-size: calc(#{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
        }
  
        @media screen and (min-width: $max-vw) {
          font-size: $max-font-size;
        }
      }
    }
  }
